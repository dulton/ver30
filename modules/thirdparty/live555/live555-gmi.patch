diff -Nur live.orig/build.sh live/build.sh
--- live.orig/build.sh	1970-01-01 08:00:00.000000000 +0800
+++ live/build.sh	2014-02-25 13:26:43.634302523 +0800
@@ -0,0 +1,13 @@
+#!/bin/bash
+
+rm -rf liblive555.a
+
+./genMakefiles ambarella
+
+make -C BasicUsageEnvironment
+make -C groupsock
+make -C liveMedia
+make -C UsageEnvironment
+
+find . -name "*.o" | xargs /home/syhuang/Desktop/Workspace/ToolChain/arm-2011.09/bin/arm-none-linux-gnueabi-ar crs liblive555.a
+
diff -Nur live.orig/config.ambarella live/config.ambarella
--- live.orig/config.ambarella	1970-01-01 08:00:00.000000000 +0800
+++ live/config.ambarella	2014-02-25 13:26:43.634302523 +0800
@@ -0,0 +1,18 @@
+CROSS_COMPILE?=		/home/syhuang/Desktop/Workspace/ToolChain/arm-2011.09/bin/arm-none-linux-gnueabi-
+COMPILE_OPTS =		$(INCLUDES) -I. -O2 -DALLOW_RTSP_SERVER_PORT_REUSE -DSOCKLEN_T=socklen_t -DNO_SSTREAM=1 -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64
+C =			c
+C_COMPILER =		$(CROSS_COMPILE)gcc
+C_FLAGS =		$(COMPILE_OPTS)
+CPP =			cpp
+CPLUSPLUS_COMPILER =	$(CROSS_COMPILE)g++
+CPLUSPLUS_FLAGS =	$(COMPILE_OPTS) -Wall -DBSD=1
+OBJ =			o
+LINK =			$(CROSS_COMPILE)g++ -o
+LINK_OPTS =		
+CONSOLE_LINK_OPTS =	$(LINK_OPTS)
+LIBRARY_LINK =		$(CROSS_COMPILE)ar csr 
+LIBRARY_LINK_OPTS =	$(LINK_OPTS)
+LIB_SUFFIX =			a
+LIBS_FOR_CONSOLE_APPLICATION =
+LIBS_FOR_GUI_APPLICATION =
+EXE =
diff -Nur live.orig/liveMedia/include/RTSPServer.hh live/liveMedia/include/RTSPServer.hh
--- live.orig/liveMedia/include/RTSPServer.hh	2013-08-31 17:13:03.000000000 +0800
+++ live/liveMedia/include/RTSPServer.hh	2014-02-25 13:26:43.634302523 +0800
@@ -243,12 +243,13 @@
     Authenticator fCurrentAuthenticator; // used if access control is needed
     char* fOurSessionCookie; // used for optional RTSP-over-HTTP tunneling
     unsigned fBase64RemainderCount; // used for optional RTSP-over-HTTP tunneling (possible values: 0,1,2,3)
+    u_int32_t fOurSessionId;
   };
 
   // The state of an individual client session (using one or more sequential TCP connections) handled by a RTSP server:
   class RTSPClientSession {
   public:
-    RTSPClientSession(RTSPServer& ourServer, u_int32_t sessionId);
+    RTSPClientSession(RTSPServer& ourServer, RTSPClientConnection& ourConnection, u_int32_t sessionId);
     virtual ~RTSPClientSession();
   protected:
     friend class RTSPServer;
@@ -286,6 +287,7 @@
 
   protected:
     RTSPServer& fOurServer;
+    RTSPClientConnection& fOurConnection;
     u_int32_t fOurSessionId;
     ServerMediaSession* fOurServerMediaSession;
     Boolean fIsMulticast, fStreamAfterSETUP;
@@ -308,7 +310,7 @@
   // If you subclass "RTSPClientSession", then you must also redefine this virtual function in order
   // to create new objects of your subclass:
   virtual RTSPClientSession*
-  createNewClientSession(u_int32_t sessionId);
+  createNewClientSession(RTSPClientConnection& ourConnection, u_int32_t sessionId);
 
   // An iterator over our "ServerMediaSession" objects:
   class ServerMediaSessionIterator {
diff -Nur live.orig/liveMedia/OnDemandServerMediaSubsession.cpp live/liveMedia/OnDemandServerMediaSubsession.cpp
--- live.orig/liveMedia/OnDemandServerMediaSubsession.cpp	2013-08-31 17:13:03.000000000 +0800
+++ live/liveMedia/OnDemandServerMediaSubsession.cpp	2014-02-25 13:26:43.634302523 +0800
@@ -500,7 +500,8 @@
   if (dests->isTCP) {
     if (fRTPSink != NULL) {
       fRTPSink->removeStreamSocket(dests->tcpSocketNum, dests->rtpChannelId);
-      RTPInterface::clearServerRequestAlternativeByteHandler(fRTPSink->envir(), dests->tcpSocketNum);
+      // Do not clear the handler, modified by hsy
+      // RTPInterface::clearServerRequestAlternativeByteHandler(fRTPSink->envir(), dests->tcpSocketNum);
     }
     if (fRTCPInstance != NULL) {
       fRTCPInstance->removeStreamSocket(dests->tcpSocketNum, dests->rtcpChannelId);
diff -Nur live.orig/liveMedia/RTPInterface.cpp live/liveMedia/RTPInterface.cpp
--- live.orig/liveMedia/RTPInterface.cpp	2013-08-31 17:13:03.000000000 +0800
+++ live/liveMedia/RTPInterface.cpp	2014-02-25 13:26:43.634302523 +0800
@@ -60,10 +60,14 @@
     fServerRequestAlternativeByteHandlerClientData = clientData;
   }
 
+  void reportSendStatus(Boolean status);
+
 private:
   static void tcpReadHandler(SocketDescriptor*, int mask);
   Boolean tcpReadHandler1(int mask);
 
+  static void sendTimedOut(SocketDescriptor* socketDescriptor);
+
 private:
   UsageEnvironment& fEnv;
   int fOurSocketNum;
@@ -73,6 +77,8 @@
   u_int8_t fStreamChannelId, fSizeByte1;
   Boolean fReadErrorOccurred, fDeleteMyselfNext, fAreInReadHandlerLoop;
   enum { AWAITING_DOLLAR, AWAITING_STREAM_CHANNEL_ID, AWAITING_SIZE1, AWAITING_SIZE2, AWAITING_PACKET_DATA } fTCPReadingState;
+  Boolean fLastSendStatus;
+  TaskToken fTask;
 };
 
 static SocketDescriptor* lookupSocketDescriptor(UsageEnvironment& env, int sockNum, Boolean createIfNotFound = True) {
@@ -205,9 +211,15 @@
   // Also, send over each of our TCP sockets:
   for (tcpStreamRecord* streams = fTCPStreams; streams != NULL;
        streams = streams->fNext) {
+    Boolean status = True;
     if (!sendRTPorRTCPPacketOverTCP(packet, packetSize,
 				    streams->fStreamSocketNum, streams->fStreamChannelId)) {
       success = False;
+      status = False;
+    }
+    SocketDescriptor* socketDescriptor = lookupSocketDescriptor(envir(), streams->fStreamSocketNum, False);
+    if (socketDescriptor != NULL) {
+      socketDescriptor->reportSendStatus(status);
     }
   }
 
@@ -307,7 +319,8 @@
     framingHeader[3] = (u_int8_t) (packetSize&0xFF);
     if (!sendDataOverTCP(socketNum, framingHeader, 4, False)) break;
 
-    if (!sendDataOverTCP(socketNum, packet, packetSize, True)) break;
+    // Send RTP or PTCP packet using non-blocking mode, modified by hsy
+    if (!sendDataOverTCP(socketNum, packet, packetSize, False)) break;
 #ifdef DEBUG_SEND
     fprintf(stderr, "sendRTPorRTCPPacketOverTCP: completed\n"); fflush(stderr);
 #endif
@@ -346,11 +359,13 @@
   :fEnv(env), fOurSocketNum(socketNum),
     fSubChannelHashTable(HashTable::create(ONE_WORD_HASH_KEYS)),
    fServerRequestAlternativeByteHandler(NULL), fServerRequestAlternativeByteHandlerClientData(NULL),
-   fReadErrorOccurred(False), fDeleteMyselfNext(False), fAreInReadHandlerLoop(False), fTCPReadingState(AWAITING_DOLLAR) {
+   fReadErrorOccurred(False), fDeleteMyselfNext(False), fAreInReadHandlerLoop(False), fTCPReadingState(AWAITING_DOLLAR),
+   fLastSendStatus(True), fTask(NULL) {
 }
 
 SocketDescriptor::~SocketDescriptor() {
   fEnv.taskScheduler().turnOffBackgroundReadHandling(fOurSocketNum);
+  fEnv.taskScheduler().unscheduleDelayedTask(fTask);
   if (fServerRequestAlternativeByteHandler != NULL) {
     // Hack: Pass a special character to our alternative byte handler, to tell it that either
     // - an error occurred when reading the TCP socket, or
@@ -395,6 +410,10 @@
       = (TaskScheduler::BackgroundHandlerProc*)&tcpReadHandler;
     fEnv.taskScheduler().
       setBackgroundHandling(fOurSocketNum, SOCKET_READABLE|SOCKET_EXCEPTION, handler, this);
+
+    // Set send buffer to 1M bytes, added by hsy
+    unsigned sendBufSize = increaseSendBufferTo(fEnv, fOurSocketNum, 1024 * 1024);
+	fprintf(stderr, "Send buffer size of socket %d is set to %d\n", fOurSocketNum, sendBufSize);
   }
 }
 
@@ -552,6 +571,30 @@
   return callAgain;
 }
 
+#define SEND_TIMED_OUT 10000000
+
+void SocketDescriptor::reportSendStatus(Boolean status) {
+  if (fLastSendStatus == status) {
+    return;
+  }
+
+  if (status) {
+    fprintf(stderr, "Send succeed again, cancel timedout timer\n");
+    fEnv.taskScheduler().unscheduleDelayedTask(fTask);
+  } else {
+    fprintf(stderr, "Send failed, start timedout timer\n");
+    fTask = fEnv.taskScheduler().scheduleDelayedTask(SEND_TIMED_OUT, (TaskFunc*)sendTimedOut, this);
+  }
+
+  fLastSendStatus = status;
+}
+
+void SocketDescriptor::sendTimedOut(SocketDescriptor* socketDescriptor) {
+  fprintf(stderr, "Socket %d send timed out\n", socketDescriptor->fOurSocketNum);
+  socketDescriptor->fDeleteMyselfNext = True;
+  socketDescriptor->fReadErrorOccurred = True;
+  tcpReadHandler(socketDescriptor, 0);
+}
 
 ////////// tcpStreamRecord implementation //////////
 
diff -Nur live.orig/liveMedia/RTSPServer.cpp live/liveMedia/RTSPServer.cpp
--- live.orig/liveMedia/RTSPServer.cpp	2013-08-31 17:13:03.000000000 +0800
+++ live/liveMedia/RTSPServer.cpp	2014-02-25 14:00:49.834242064 +0800
@@ -18,6 +18,8 @@
 // A RTSP server
 // Implementation
 
+#include <netinet/tcp.h>
+
 #include "RTSPServer.hh"
 #include "RTSPCommon.hh"
 #include "ProxyServerMediaSession.hh"
@@ -314,6 +316,14 @@
   envir().taskScheduler().turnOffBackgroundReadHandling(fHTTPServerSocket);
   ::closeSocket(fHTTPServerSocket);
 
+  // Close all client session objects before client connection objects, modified by hsy
+  // Close all client session objects:
+  RTSPServer::RTSPClientSession* clientSession;
+  while ((clientSession = (RTSPServer::RTSPClientSession*)fClientSessions->getFirst()) != NULL) {
+    delete clientSession;
+  }
+  delete fClientSessions;
+
   // Close all client connection objects:
   RTSPServer::RTSPClientConnection* connection;
   while ((connection = (RTSPServer::RTSPClientConnection*)fClientConnections->getFirst()) != NULL) {
@@ -322,13 +332,6 @@
   delete fClientConnections;
   delete fClientConnectionsForHTTPTunneling; // all content was already removed as a result of the loop above
 
-  // Close all client session objects:
-  RTSPServer::RTSPClientSession* clientSession;
-  while ((clientSession = (RTSPServer::RTSPClientSession*)fClientSessions->getFirst()) != NULL) {
-    delete clientSession;
-  }
-  delete fClientSessions;
-
   // Delete all server media sessions
   ServerMediaSession* serverMediaSession;
   while ((serverMediaSession = (ServerMediaSession*)fServerMediaSessions->getFirst()) != NULL) {
@@ -378,6 +381,38 @@
   makeSocketNonBlocking(clientSocket);
   increaseSendBufferTo(envir(), clientSocket, 50*1024);
 
+  struct {
+    const char * name;
+    int          level;
+    int          option;
+    int          value;
+  } sockOptions[] = {
+    { "TCP_KEEPIDLE",  SOL_TCP,    TCP_KEEPIDLE,  5 },
+    { "TCP_KEEPINTVL", SOL_TCP,    TCP_KEEPINTVL, 5 },
+    { "TCP_KEEPCNT",   SOL_TCP,    TCP_KEEPCNT,   3 },
+    { "SO_KEEPALIVE",  SOL_SOCKET, SO_KEEPALIVE,  1 },
+  };
+
+#ifndef COUNT_OF
+#define COUNT_OF(array) (sizeof(array) / sizeof(array[0]))
+#endif
+
+  for (unsigned i = 0; i < COUNT_OF(sockOptions); ++ i) {
+    int       value = 0;
+    socklen_t len   = sizeof(value);
+    if (getsockopt(clientSocket, sockOptions[i].level, sockOptions[i].option, &value, &len) < 0) {
+      fprintf(stderr, "Failed to get socket option %s\n", sockOptions[i].name);
+      break;
+    }
+
+    if (setsockopt(clientSocket, sockOptions[i].level, sockOptions[i].option, &sockOptions[i].value, sizeof(sockOptions[i].value)) < 0) {
+      fprintf(stderr, "Failed to set socket option %s\n", sockOptions[i].name);
+      break;
+    } else {
+      fprintf(stderr, "Set socket option %s from %d to %d\n", sockOptions[i].name, value, sockOptions[i].value);
+    }
+  }
+
 #ifdef DEBUG
   envir() << "accept()ed connection from " << AddressString(clientAddr).val() << "\n";
 #endif
@@ -418,7 +453,7 @@
 ::RTSPClientConnection(RTSPServer& ourServer, int clientSocket, struct sockaddr_in clientAddr)
   : fOurServer(ourServer), fIsActive(True),
     fClientInputSocket(clientSocket), fClientOutputSocket(clientSocket), fClientAddr(clientAddr),
-    fRecursionCount(0), fOurSessionCookie(NULL) {
+    fRecursionCount(0), fOurSessionCookie(NULL), fOurSessionId(0) {
   // Add ourself to our 'client connections' table:
   fOurServer.fClientConnections->Add((char const*)this, this);
 
@@ -432,6 +467,14 @@
   // Remove ourself from the server's 'client connections' hash table before we go:
   fOurServer.fClientConnections->Remove((char const*)this);
 
+  // Close client session object which is created by this connection, modified by hsy
+  if (fOurSessionId != 0 ) {
+    char sessionIdStr[RTSP_PARAM_STRING_MAX];
+    sprintf(sessionIdStr, "%08X", fOurSessionId);
+    RTSPServer::RTSPClientSession* clientSession = (RTSPServer::RTSPClientSession*)(fOurServer.fClientSessions->Lookup(sessionIdStr));
+    delete clientSession;
+  }
+
   if (fOurSessionCookie != NULL) {
     // We were being used for RTSP-over-HTTP tunneling. Also remove ourselves from the 'session cookie' hash table before we go:
     fOurServer.fClientConnectionsForHTTPTunneling->Remove(fOurSessionCookie);
@@ -880,12 +923,14 @@
       // Handle the specified command (beginning by checking those that don't require session ids):
       fCurrentCSeq = cseq;
       if (strcmp(cmdName, "OPTIONS") == 0) {
+#if RTSP_NEED_NOTE_LIVENESS // Added by syhuang
 	// If the request included a "Session:" id, and it refers to a client session that's current ongoing, then use this
 	// command to indicate 'liveness' on that client session:
 	if (sessionIdStr[0] != '\0') {
 	  clientSession = (RTSPServer::RTSPClientSession*)(fOurServer.fClientSessions->Lookup(sessionIdStr));
 	  if (clientSession != NULL) clientSession->noteLiveness();
 	}
+#endif
 	handleCmd_OPTIONS();
       } else if (urlPreSuffix[0] == '\0' && urlSuffix[0] == '*' && urlSuffix[1] == '\0') {
 	// The special "*" URL means: an operation on the entire server.  This works only for GET_PARAMETER and SET_PARAMETER:
@@ -908,8 +953,17 @@
 	    sessionId = (u_int32_t)our_random32();
 	    sprintf(sessionIdStr, "%08X", sessionId);
 	  } while (sessionId == 0 || fOurServer.fClientSessions->Lookup(sessionIdStr) != NULL);
-	  clientSession = fOurServer.createNewClientSession(sessionId);
+	  clientSession = fOurServer.createNewClientSession(*this, sessionId);
 	  fOurServer.fClientSessions->Add(sessionIdStr, clientSession);
+
+	  // Close old client session created by this connection, modified by hsy
+	  if (fOurSessionId != 0 && fOurSessionId != sessionId) {
+	    sprintf(sessionIdStr, "%08X", fOurSessionId);
+	    RTSPServer::RTSPClientSession* clientSession = (RTSPServer::RTSPClientSession*)(fOurServer.fClientSessions->Lookup(sessionIdStr));
+	    delete clientSession;
+	  }
+	  fOurSessionId = sessionId;
+
 	} else {
 	  // The request included a session id.  Make sure it's one that we have already set up:
 	  clientSession = (RTSPServer::RTSPClientSession*)(fOurServer.fClientSessions->Lookup(sessionIdStr));
@@ -1001,7 +1055,11 @@
 #ifdef DEBUG
     fprintf(stderr, "sending response: %s", fResponseBuffer);
 #endif
-    send(fClientOutputSocket, (char const*)fResponseBuffer, strlen((char*)fResponseBuffer), 0);
+    // Add error print while failed to send RTSP response, added by hsy
+    int sentBytes = send(fClientOutputSocket, (char const*)fResponseBuffer, strlen((char*)fResponseBuffer), 0);
+    if (sentBytes < 0) {
+        fprintf(stderr, "Failed to send response ... errno = %d\n", errno);
+    }
     
     if (clientSession != NULL && clientSession->fStreamAfterSETUP && strcmp(cmdName, "SETUP") == 0) {
       // The client has asked for streaming to commence now, rather than after a
@@ -1260,10 +1318,12 @@
 ////////// RTSPServer::RTSPClientSession implementation //////////
 
 RTSPServer::RTSPClientSession
-::RTSPClientSession(RTSPServer& ourServer, u_int32_t sessionId)
-  : fOurServer(ourServer), fOurSessionId(sessionId), fOurServerMediaSession(NULL), fIsMulticast(False), fStreamAfterSETUP(False),
+::RTSPClientSession(RTSPServer& ourServer, RTSPClientConnection& ourConnection, u_int32_t sessionId)
+  : fOurServer(ourServer), fOurConnection(ourConnection), fOurSessionId(sessionId), fOurServerMediaSession(NULL), fIsMulticast(False), fStreamAfterSETUP(False),
     fTCPStreamIdCount(0), fLivenessCheckTask(NULL), fNumStreamStates(0), fStreamStates(NULL) {
+#if RTSP_NEED_NOTE_LIVENESS // Added by syhuang
   noteLiveness();
+#endif
 }
 
 RTSPServer::RTSPClientSession::~RTSPClientSession() {
@@ -1274,6 +1334,8 @@
   char sessionIdStr[9];
   sprintf(sessionIdStr, "%08X", fOurSessionId);
   fOurServer.fClientSessions->Remove(sessionIdStr);
+  // Clear the session object saved by connection object, added by hsy
+  fOurConnection.fOurSessionId = 0;
 
   reclaimStreamStates();
 
@@ -1390,7 +1452,9 @@
   char const* trackId = urlSuffix; // in the normal case
   char* concatenatedStreamName = NULL; // in the normal case
 
+#if RTSP_NEED_NOTE_LIVENESS // Added by syhuang
   noteLiveness();
+#endif
   do {
     // First, make sure the specified stream name exists:
     ServerMediaSession* sms = fOurServer.lookupServerMediaSession(streamName);
@@ -1642,7 +1706,9 @@
   // Begin by figuring out which of these it is:
   ServerMediaSubsession* subsession;
 
+#if RTSP_NEED_NOTE_LIVENESS // Added by syhuang
   noteLiveness();
+#endif
   if (fOurServerMediaSession == NULL) { // There wasn't a previous SETUP!
     ourClientConnection->handleCmd_notSupported();
     return;
@@ -1964,8 +2030,8 @@
 }
 
 RTSPServer::RTSPClientSession*
-RTSPServer::createNewClientSession(u_int32_t sessionId) {
-  return new RTSPClientSession(*this, sessionId);
+RTSPServer::createNewClientSession(RTSPClientConnection& ourConnection, u_int32_t sessionId) {
+  return new RTSPClientSession(*this, ourConnection, sessionId);
 }
 
 void RTSPServer::RTSPClientSession::noteLiveness() {
